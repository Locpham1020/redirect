/**
 * Dorik Sync - Phi√™n b·∫£n si√™u ƒë∆°n gi·∫£n
 * Version: 5.0.0
 * T√°c gi·∫£: ·ª®ng d·ª•ng ƒê·ªìng b·ªô Dorik
 */

(function() {
  // Tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn
  if (window.DorikSync) {
    console.log("‚ö†Ô∏è DorikSync ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥");
    return;
  }
  
  // ƒê·ªãnh nghƒ©a ƒë·ªëi t∆∞·ª£ng ch√≠nh
  const DorikSync = {
    version: "5.0.0",
    debug: true,
    
    // Kh·ªüi t·∫°o DorikSync
    init: function() {
      // Th√™m CSS c·∫ßn thi·∫øt
      this.addCSS();
      
      // Ch·ªù DOM s·∫µn s√†ng
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.onReady());
      } else {
        this.onReady();
      }
      
      console.log("‚úÖ DorikSync v5.0.0 ƒë√£ kh·ªüi t·∫°o");
      return this;
    },
    
    // H√†m ch·∫°y khi DOM ƒë√£ s·∫µn s√†ng
    onReady: function() {
      // Ki·ªÉm tra d·ªØ li·ªáu
      if (!window.PRODUCT_DATA) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y PRODUCT_DATA. Vui l√≤ng ƒë·∫£m b·∫£o data.js ƒë∆∞·ª£c t·∫£i tr∆∞·ªõc main.js");
        return;
      }
      
      // C·∫≠p nh·∫≠t t·∫•t c·∫£ containers
      this.updateAll();
      
      // Theo d√µi thay ƒë·ªïi DOM
      this.observeDomChanges();
      
      // Thi·∫øt l·∫≠p ki·ªÉm tra ƒë·ªãnh k·ª≥
      setInterval(() => this.fixAllLinks(), 5000);
      
      // Fix th√™m khi trang ƒë√£ load ho√†n to√†n
      window.addEventListener('load', () => {
        setTimeout(() => this.updateAll(), 1000);
        setTimeout(() => this.fixAllLinks(), 2000);
      });
    },
    
    // Th√™m CSS c·∫ßn thi·∫øt
    addCSS: function() {
      const style = document.createElement('style');
      style.textContent = `
        img[src*="shopee"], img[alt*="shopee"],
        img[src*="tiktok"], img[alt*="tiktok"] {
          cursor: pointer !important;
        }
      `;
      document.head.appendChild(style);
    },
    
    // C·∫≠p nh·∫≠t gi√° ti·ªÅn cho container
    updatePrice: function(container, price) {
      if (!price) return false;
      
      try {
        // ƒê·ªãnh d·∫°ng gi√°
        let formattedPrice = price;
        if (!price.toString().includes('VND')) {
          formattedPrice = price + ' VND';
        }
        
        // T√¨m ph·∫ßn t·ª≠ hi·ªÉn th·ªã gi√°
        const priceElements = container.querySelectorAll('.price, .amount, .icon-text-title, [class*="price"], [class*="title"]');
        
        for (let i = 0; i < priceElements.length; i++) {
          const element = priceElements[i];
          const text = element.textContent || '';
          
          // Ki·ªÉm tra n·∫øu ƒë√¢y l√† ph·∫ßn t·ª≠ hi·ªÉn th·ªã gi√°
          if (text.includes('VND') || text.includes('Gi√°') || 
              text.includes('Price') || /\d{3,}/.test(text)) {
            element.textContent = formattedPrice;
            if (this.debug) console.log(`üí∞ ƒê√£ c·∫≠p nh·∫≠t gi√°: ${formattedPrice} cho ${container.id}`);
            return true;
          }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m b·∫•t k·ª≥ ph·∫ßn t·ª≠ span n√†o
        const anySpan = container.querySelector('span');
        if (anySpan) {
          anySpan.textContent = formattedPrice;
          if (this.debug) console.log(`üí∞ ƒê√£ c·∫≠p nh·∫≠t gi√° (fallback): ${formattedPrice} cho ${container.id}`);
          return true;
        }
        
        return false;
      } catch (e) {
        console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° cho ${container.id}:`, e);
        return false;
      }
    },
    
    // L√†m cho h√¨nh ·∫£nh Shopee/TikTok c√≥ th·ªÉ click
    makeImageClickable: function(img, url, platform) {
      try {
        // N·∫øu ƒë√£ x·ª≠ l√Ω r·ªìi th√¨ b·ªè qua
        if (img.hasAttribute('data-clickable')) return;
        
        // Ki·ªÉm tra xem ƒë√£ n·∫±m trong link ch∆∞a
        let isInsideLink = false;
        let parent = img.parentNode;
        
        while (parent && parent !== document.body) {
          if (parent.tagName === 'A') {
            // C·∫≠p nh·∫≠t link
            parent.href = url;
            parent.setAttribute('target', '_blank');
            parent.setAttribute('rel', 'noopener');
            img.setAttribute('data-clickable', 'true');
            isInsideLink = true;
            break;
          }
          parent = parent.parentNode;
        }
        
        // N·∫øu ch∆∞a n·∫±m trong link, th√™m click handler tr·ª±c ti·∫øp
        if (!isInsideLink) {
          img.style.cursor = 'pointer';
          img.setAttribute('data-clickable', 'true');
          img.setAttribute('data-url', url);
          img.setAttribute('data-platform', platform);
          
          img.addEventListener('click', function() {
            window.open(url, '_blank');
          });
          
          if (this.debug) console.log(`üîó ƒê√£ th√™m click handler cho h√¨nh ${platform}`);
        }
      } catch (e) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω h√¨nh ${platform}:`, e);
      }
    },
    
    // C·∫≠p nh·∫≠t links Shopee v√† TikTok
    updateLinks: function(container, data) {
      try {
        if (!data) return false;
        
        // X·ª≠ l√Ω links Shopee
        if (data.link_shopee) {
          // T√¨m t·∫•t c·∫£ h√¨nh ·∫£nh Shopee
          const shopeeImages = container.querySelectorAll('img[src*="shopee"], img[alt*="shopee"]');
          shopeeImages.forEach(img => {
            this.makeImageClickable(img, data.link_shopee, 'shopee');
          });
          
          // C·∫≠p nh·∫≠t c·∫£ links c√≥ s·∫µn
          container.querySelectorAll('a[href*="shopee"]').forEach(link => {
            link.href = data.link_shopee;
            link.setAttribute('target', '_blank');
            link.setAttribute('rel', 'noopener');
          });
        }
        
        // X·ª≠ l√Ω links TikTok
        if (data.link_tiktok) {
          // T√¨m t·∫•t c·∫£ h√¨nh ·∫£nh TikTok
          const tiktokImages = container.querySelectorAll('img[src*="tiktok"], img[alt*="tiktok"]');
          tiktokImages.forEach(img => {
            this.makeImageClickable(img, data.link_tiktok, 'tiktok');
          });
          
          // C·∫≠p nh·∫≠t c·∫£ links c√≥ s·∫µn
          container.querySelectorAll('a[href*="tiktok"]').forEach(link => {
            link.href = data.link_tiktok;
            link.setAttribute('target', '_blank');
            link.setAttribute('rel', 'noopener');
          });
        }
        
        return true;
      } catch (e) {
        console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t links cho ${container.id}:`, e);
        return false;
      }
    },
    
    // C·∫≠p nh·∫≠t m·ªôt container
    updateContainer: function(containerId) {
      try {
        // T√¨m container
        const container = document.getElementById(containerId);
        if (!container) {
          if (this.debug) console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y container: ${containerId}`);
          return false;
        }
        
        // L·∫•y d·ªØ li·ªáu
        const data = window.PRODUCT_DATA[containerId];
        if (!data) {
          if (this.debug) console.log(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho container: ${containerId}`);
          return false;
        }
        
        let updated = false;
        
        // C·∫≠p nh·∫≠t gi√°
        if (this.updatePrice(container, data.money)) {
          updated = true;
        }
        
        // C·∫≠p nh·∫≠t links
        if (this.updateLinks(container, data)) {
          updated = true;
        }
        
        // ƒê√°nh d·∫•u container ƒë√£ c·∫≠p nh·∫≠t
        if (updated) {
          container.setAttribute('data-updated', 'true');
          if (this.debug) console.log(`‚úÖ Container ${containerId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng`);
        }
        
        return updated;
      } catch (e) {
        console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t container ${containerId}:`, e);
        return false;
      }
    },
    
    // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c containers
    updateAll: function() {
      try {
        // Ki·ªÉm tra d·ªØ li·ªáu
        if (!window.PRODUCT_DATA) {
          console.error("‚ùå Kh√¥ng t√¨m th·∫•y PRODUCT_DATA");
          return 0;
        }
        
        // L·∫•y danh s√°ch container IDs
        const containerIds = Object.keys(window.PRODUCT_DATA);
        let updatedCount = 0;
        
        // C·∫≠p nh·∫≠t t·ª´ng container
        containerIds.forEach(id => {
          if (this.updateContainer(id)) {
            updatedCount++;
          }
        });
        
        // Fix th√™m cho t·∫•t c·∫£ links
        this.fixAllLinks();
        
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updatedCount}/${containerIds.length} containers`);
        return updatedCount;
      } catch (e) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t containers:", e);
        return 0;
      }
    },
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ links m·ªü trong tab m·ªõi
    fixAllLinks: function() {
      try {
        // Fix links Shopee v√† TikTok
        document.querySelectorAll('a[href*="shopee"], a[href*="tiktok"]').forEach(link => {
          link.setAttribute('target', '_blank');
          link.setAttribute('rel', 'noopener');
        });
        
        // Th√™m x·ª≠ l√Ω cho h√¨nh ·∫£nh ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
        document.querySelectorAll('img[src*="shopee"]:not([data-clickable]), img[src*="tiktok"]:not([data-clickable])').forEach(img => {
          // T√¨m container ID
          let containerId = null;
          let container = img;
          
          while (container && container !== document.body) {
            if (container.id && window.PRODUCT_DATA && window.PRODUCT_DATA[container.id]) {
              containerId = container.id;
              break;
            }
            container = container.parentElement;
          }
          
          if (containerId) {
            const data = window.PRODUCT_DATA[containerId];
            const platform = img.src.includes('shopee') || img.alt.includes('shopee') ? 'shopee' : 'tiktok';
            const url = platform === 'shopee' ? data.link_shopee : data.link_tiktok;
            
            if (url) {
              this.makeImageClickable(img, url, platform);
            }
          }
        });
      } catch (e) {
        console.error("‚ùå L·ªói khi fix links:", e);
      }
    },
    
    // Theo d√µi thay ƒë·ªïi DOM ƒë·ªÉ c·∫≠p nh·∫≠t c√°c container m·ªõi
    observeDomChanges: function() {
      if (!window.MutationObserver) return;
      
      const observer = new MutationObserver(mutations => {
        let needsUpdate = false;
        
        mutations.forEach(mutation => {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            for (let i = 0; i < mutation.addedNodes.length; i++) {
              const node = mutation.addedNodes[i];
              // Ch·ªâ quan t√¢m c√°c ph·∫ßn t·ª≠ HTML
              if (node.nodeType === 1) {
                // Ki·ªÉm tra n·∫øu l√† container ho·∫∑c ch·ª©a container
                if ((node.id && window.PRODUCT_DATA && window.PRODUCT_DATA[node.id]) ||
                   (node.querySelector && node.querySelector('[id^="sp"]'))) {
                  needsUpdate = true;
                  break;
                }
              }
            }
          }
        });
        
        if (needsUpdate) {
          console.log("üîÑ Ph√°t hi·ªán thay ƒë·ªïi DOM, c·∫≠p nh·∫≠t containers...");
          setTimeout(() => this.updateAll(), 500);
        }
      });
      
      // Theo d√µi to√†n b·ªô body
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      
      console.log("üëÅÔ∏è ƒêang theo d√µi thay ƒë·ªïi DOM");
    }
  };
  
  // Kh·ªüi t·∫°o v√† xu·∫•t DorikSync
  window.DorikSync = DorikSync.init();
  
  // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, c·∫≠p nh·∫≠t ngay
  if (window.PRODUCT_DATA) {
    console.log("üîÑ ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m, c·∫≠p nh·∫≠t ngay...");
    setTimeout(() => DorikSync.updateAll(), 100);
  }
})();
